apiVersion: apps/v1
kind: Deployment
metadata:
  name: word-deploy
  namespace: word
spec:
  replicas: 3
  selector:
    matchLabels:
      app: word-deploy
      version: v1
  template:
    metadata:
      labels:
        app: word-deploy
        version: v1
    spec:
#     affinity:
#       nodeAffinity:
#         requiredDuringSchedulingIgnoredDuringExecution:
#           nodeSelectorTerms:
#           - matchExpressions:
#             - key: kubernetes.io/hostname
#               operator: In
#               values:
#               - worker01
      containers:
      - image: wordpress:latest
        name: word-deploy
        ports:
        - containerPort: 80
        lifecycle:
          postStart:
            exec:
              command:
                - "/bin/sh"
                - "-c"
                - |
                  export RESTORE_ENABLE="false"
          preStop:
            exec:
              command:
                - "/bin/sh"
                - "-c"
                - |
                  export RESTORE_ENABLE="false"
        volumeMounts:
        - mountPath: /var/www/html
          name: wordpress-files
        - mountPath: /var/www/html/wp-config.php
          name: wp-config-volume
          subPath: wp-config.php
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: access-key
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: secret-key
        - name: RESTORE_DATE
          valueFrom:
            configMapKeyRef:
              name: word-config
              key: RESTORE_DATE
      volumes:
      - name: wp-config-volume
        configMap:
          name: word-config
      - name: plugins-volume
        emptyDir: {}
      - name: word-secret-volume
        secret:
          secretName: word-secret
      - name: wordpress-files
        persistentVolumeClaim:
          claimName: wordpress-pvc
      - name: apache-logs
        emptyDir: {}
      initContainers:
      - name: restore
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          if [ "$RESTORE_DATE" = "2024-05-13" ]; then
            apk add --no-cache curl
            curl -L https://dl.min.io/client/mc/release/linux-amd64/mc --create-dirs -o $HOME/minio-binaries/mc && \
            chmod +x $HOME/minio-binaries/mc && \
            export PATH=$PATH:$HOME/minio-binaries/ && \
            mkdir /backup
            chmod 777 /backup
            mc alias set myminio http://minio-service:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY && \
            mc ls myminio/wordpress
            if mc ls myminio/wordpress | grep -q "wordpress_backup_$RESTORE_DATE.tar.gz"; then
                echo "backup found"
                mkdir /backup/wordpress_flag_$RESTORE_DATE
                mc cp myminio/wordpress/wordpress_backup_$RESTORE_DATE.tar.gz /backup
                tar -xvf /backup/wordpress_backup_$RESTORE_DATE.tar.gz -C /backup/wordpress_flag_$RESTORE_DATE
                if [ -d "/backup/wordpress_flag_$RESTORE_DATE" ]; then
                    rm -rf /backup/wordpress_backup_$RESTORE_DATE.tar.gz
                    echo "found flag"
                    if [ "$RESTORE_DATE_DB" = "2024-05-15" ]; then
                       apk add --no-cache mysql-client
                       mysql -h mysql-service -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "DROP DATABASE $MYSQL_DATABASE"
                       mysql -h mysql-service -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD < $(mc cat myminio/mysql/mysql_backup_$RESTORE_DATE_DB.sql)
                       tar -cvf /backup/wordpress_flag_$(date +"%Y-%m-%d").tar.gz /backup/wordpress_flag_$RESTORE_DATE
                       mc cp /backup/wordpress_flag_$(date +"%Y-%m-%d").tar.gz myminio/flag/
                       rm -rf /backup/wordpress_flag_$RESTORE_DATE
                    else
                       echo "not found folder"
                    fi
                else
                    echo "not found flag"
                fi
            else
                echo "not found in minio"
            fi
          else
            echo "incorrect env"
          fi
        env:
        - name: RESTORE_DATE
          valueFrom:
            configMapKeyRef:
              name: word-config
              key: RESTORE_DATE
        - name: RESTORE_DATE_DB
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: RESTORE_DATE_DB
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: access-key
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: secret-key
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_USER
        volumeMounts:
        - mountPath: /var/www/html
          name: wordpress-files
